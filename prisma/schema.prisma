generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  email            String           @unique
  phoneNumber      String
  FullName         String
  UserName         String
  dob              DateTime?
  gender           String?
  bio              String?
  emergencyContact String?
  profilePic       String?
  shortBio         String?
  Address          String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  block            Boolean         @default(false)
  posts            Post[]
  msg              msg[]
  bookmarks        Bookmark[]
  replies          Reply[]
  likedPost        Like[]
}

model Post {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  location   String
  caption    String
  date       DateTime   @db.Date
  imageUrl   String
  authorName String
  authorId   String     @db.ObjectId
  author     User       @relation(fields: [authorId], references: [id])
  replies    Reply[]
  bookmarks  Bookmark[]
  likes      Like[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Bookmark {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model chatRoom {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user1     String
  user2     String
  message   msg[]
}

model msg {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  chatRoom   chatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String   @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  time       DateTime @default(now())
  received   Boolean  @default(false)
}